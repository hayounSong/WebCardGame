from .core import encode, decode, alabel, ulabel, IDNAError
import codecs
import re
<<<<<<< HEAD
from typing import Tuple, Optional

_unicode_dots_re = re.compile('[\u002e\u3002\uff0e\uff61]')
=======

_unicode_dots_re = re.compile(u'[\u002e\u3002\uff0e\uff61]')
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624

class Codec(codecs.Codec):

    def encode(self, data, errors='strict'):
<<<<<<< HEAD
        # type: (str, str) -> Tuple[bytes, int]
        if errors != 'strict':
            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))

        if not data:
            return b"", 0

        return encode(data), len(data)

    def decode(self, data, errors='strict'):
        # type: (bytes, str) -> Tuple[str, int]
        if errors != 'strict':
            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))

        if not data:
            return '', 0

        return decode(data), len(data)

class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
    def _buffer_encode(self, data, errors, final):  # type: ignore
        # type: (str, str, bool) -> Tuple[str, int]
        if errors != 'strict':
            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))
=======

        if errors != 'strict':
            raise IDNAError("Unsupported error handling \"{0}\"".format(errors))
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624

        if not data:
            return "", 0

<<<<<<< HEAD
        labels = _unicode_dots_re.split(data)
        trailing_dot = ''
=======
        return encode(data), len(data)

    def decode(self, data, errors='strict'):

        if errors != 'strict':
            raise IDNAError("Unsupported error handling \"{0}\"".format(errors))

        if not data:
            return u"", 0

        return decode(data), len(data)

class IncrementalEncoder(codecs.BufferedIncrementalEncoder):
    def _buffer_encode(self, data, errors, final):
        if errors != 'strict':
            raise IDNAError("Unsupported error handling \"{0}\"".format(errors))

        if not data:
            return ("", 0)

        labels = _unicode_dots_re.split(data)
        trailing_dot = u''
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624
        if labels:
            if not labels[-1]:
                trailing_dot = '.'
                del labels[-1]
            elif not final:
                # Keep potentially unfinished label until the next call
                del labels[-1]
                if labels:
                    trailing_dot = '.'

        result = []
        size = 0
        for label in labels:
            result.append(alabel(label))
            if size:
                size += 1
            size += len(label)

        # Join with U+002E
<<<<<<< HEAD
        result_str = '.'.join(result) + trailing_dot  # type: ignore
        size += len(trailing_dot)
        return result_str, size

class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
    def _buffer_decode(self, data, errors, final):  # type: ignore
        # type: (str, str, bool) -> Tuple[str, int]
        if errors != 'strict':
            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))

        if not data:
            return ('', 0)

        labels = _unicode_dots_re.split(data)
        trailing_dot = ''
        if labels:
            if not labels[-1]:
                trailing_dot = '.'
=======
        result = ".".join(result) + trailing_dot
        size += len(trailing_dot)
        return (result, size)

class IncrementalDecoder(codecs.BufferedIncrementalDecoder):
    def _buffer_decode(self, data, errors, final):
        if errors != 'strict':
            raise IDNAError("Unsupported error handling \"{0}\"".format(errors))

        if not data:
            return (u"", 0)

        # IDNA allows decoding to operate on Unicode strings, too.
        if isinstance(data, unicode):
            labels = _unicode_dots_re.split(data)
        else:
            # Must be ASCII string
            data = str(data)
            unicode(data, "ascii")
            labels = data.split(".")

        trailing_dot = u''
        if labels:
            if not labels[-1]:
                trailing_dot = u'.'
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624
                del labels[-1]
            elif not final:
                # Keep potentially unfinished label until the next call
                del labels[-1]
                if labels:
<<<<<<< HEAD
                    trailing_dot = '.'
=======
                    trailing_dot = u'.'
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624

        result = []
        size = 0
        for label in labels:
            result.append(ulabel(label))
            if size:
                size += 1
            size += len(label)

<<<<<<< HEAD
        result_str = '.'.join(result) + trailing_dot
        size += len(trailing_dot)
        return (result_str, size)
=======
        result = u".".join(result) + trailing_dot
        size += len(trailing_dot)
        return (result, size)
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624


class StreamWriter(Codec, codecs.StreamWriter):
    pass

<<<<<<< HEAD

class StreamReader(Codec, codecs.StreamReader):
    pass


def getregentry():
    # type: () -> codecs.CodecInfo
    # Compatibility as a search_function for codecs.register()
    return codecs.CodecInfo(
        name='idna',
        encode=Codec().encode,  # type: ignore
        decode=Codec().decode,  # type: ignore
=======
class StreamReader(Codec, codecs.StreamReader):
    pass

def getregentry():
    return codecs.CodecInfo(
        name='idna',
        encode=Codec().encode,
        decode=Codec().decode,
>>>>>>> 342e32b47943f36b58668459d3a10c5c5fbfb624
        incrementalencoder=IncrementalEncoder,
        incrementaldecoder=IncrementalDecoder,
        streamwriter=StreamWriter,
        streamreader=StreamReader,
    )
